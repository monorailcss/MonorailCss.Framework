@page "/"
@using System.Text
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@using MonorailCss
@using Global = BlazorMonaco.Editor.Global
@inject IJSRuntime Js

<PageTitle>Try MonorailCss</PageTitle>
<div class="max-w-full h-full" style="display: grid;grid-template-columns: 1fr 6px 2fr;">
    <div class="grid grid-cols-1 grid-rows-2 h-full">
        <div class="flex flex-col h-full">
            @_headerMessage("HTML")
            <div class="flex-auto">
                <StandaloneCodeEditor @ref="HtmlEditor" Id="htmlEditor" ConstructionOptions="EditorConstructionOptions"
                                      OnDidInit="EditorOnInit" OnDidChangeModelContent="ModelChanged"/>
            </div>
        </div>
        <div class="flex flex-col h-full border-t border-gray-700">
            @_headerMessage("CSS")
            <div class="flex-auto">
                <StandaloneCodeEditor @ref="CssEditor" Id="cssViewer" ConstructionOptions="ViewerConstructionOptions"/>
            </div>
        </div>
    </div>
    <div class="gutter-col-1 bg-slate-600 shadow-inner" style="grid-row: 1/-1;cursor: col-resize;grid-column: 2"></div>
    <div>
        <div class="h-full w-full flex">
            <PreviewViewer @ref="@PreviewViewer"/>
        </div>
    </div>
</div>

@code{
    private StandaloneCodeEditor HtmlEditor { get; set; } = null!;
    private StandaloneCodeEditor CssEditor { get; set; } = null!;
    private PreviewViewer PreviewViewer { get; set; } = null!;

    private readonly CssFramework _framework = new();

    private readonly RenderFragment<string> _headerMessage = message =>
        @<header class="flex-none px-6 py-4 bg-gray-800 text-gray-50 border-b border-gray-700">@message</header>;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("initSplit");
            await RegisterHoverProvider();
            // bit of a hack to give the preview viewer a chance to add event listeners. probably should have it
            // inform us it is loaded and then we could send it the data, but a task for another day.
            await Task.Delay(50);
            await UpdateView();
        }
    }

    private async Task RegisterHoverProvider()
    {
        await BlazorMonaco.Languages.Global.RegisterHoverProviderAsync(Js, "html", async (uri, position, _) =>
        {
            var model = await Global.GetModel(Js, uri);
            if (model == null)
                return null;

            // Get the utility class at the current position
            var utilityClass = await GetUtilityClassAtPosition(model, position);
            if (utilityClass == null)
                return null;

            var f = new CssFramework(new CssFrameworkSettings() { IncludePreflight = false });
            var r = f.Process(utilityClass.ClassName);
            var output = $"```css\n{ExtractLayerContent(r)}\n```";


            return new Hover
            {
                Contents =
                [
                    new MarkdownString { Value = output, SupportThemeIcons = false }
                ],
                Range = new BlazorMonaco.Range
                {
                    StartLineNumber = position.LineNumber,
                    EndLineNumber = position.LineNumber,
                    StartColumn = utilityClass.StartColumn,
                    EndColumn = utilityClass.EndColumn
                },
            };
        });
    }

    private record UtilityClassLocation(string ClassName, int StartColumn, int EndColumn);

    private async Task<UtilityClassLocation?> GetUtilityClassAtPosition(TextModel model, Position position)
    {
        // Get the line content
        var lineContent = await model.GetLineContent(position.LineNumber);
        if (string.IsNullOrEmpty(lineContent))
            return null;

        // Monaco columns are 1-indexed, convert to 0-indexed for string operations
        var cursorIndex = position.Column - 1;

        // Make sure we're within bounds
        if (cursorIndex < 0 || cursorIndex > lineContent.Length)
            return null;

        // Define delimiters that separate utility classes
        static bool IsDelimiter(char c) => c is ' ' or '\t' or '"' or '\'' or '<' or '>' or '\n' or '\r';

        // If we're on a delimiter, there's no class to extract
        if (cursorIndex < lineContent.Length && IsDelimiter(lineContent[cursorIndex]))
            return null;

        // Walk backwards to find the start of the utility class
        var startIndex = cursorIndex;
        while (startIndex > 0 && !IsDelimiter(lineContent[startIndex - 1]))
        {
            startIndex--;
        }

        // Walk forwards to find the end of the utility class
        var endIndex = cursorIndex;
        while (endIndex < lineContent.Length && !IsDelimiter(lineContent[endIndex]))
        {
            endIndex++;
        }

        // Extract the class name
        var className = lineContent.Substring(startIndex, endIndex - startIndex);

        // Return null if the extracted string is empty
        if (string.IsNullOrWhiteSpace(className))
            return null;

        // Convert back to 1-indexed Monaco columns
        return new UtilityClassLocation(className, startIndex + 1, endIndex + 1);
    }

    private static StandaloneEditorConstructionOptions StandardOptions() => new()
    {
        AutomaticLayout = true,
        Language = "html",
        GlyphMargin = true,
        Scrollbar = new EditorScrollbarOptions { HorizontalScrollbarSize = 8, VerticalScrollbarSize = 8, },
        FoldingHighlight = false,
        RenderLineHighlightOnlyWhenFocus = true,
        RenderLineHighlight = "none",
        FontFamily = "'Cascadia Code', Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace",
        FontWeight = "300",
        SuggestFontSize = 13,
        ColorDecorators = true,
        SuggestLineHeight = 17,
        FontSize = 15,
        Padding = new EditorPaddingOptions { Top = 4, Bottom = 4 },
        Hover = new EditorHoverOptions
        {
            Enabled = true,
            Delay = 200,
        },
        Minimap = new EditorMinimapOptions
        {
            Enabled = false,
        },
        Folding = true,
        // LineDecorationsWidth = "16px",
        Contextmenu = false,
        Theme = "my-custom-theme",
    };

    private static StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        var opts = StandardOptions();
        opts.Language = "html";
        return opts;
    }

    private static StandaloneEditorConstructionOptions ViewerConstructionOptions(StandaloneCodeEditor editor)
    {
        var opts = StandardOptions();
        opts.ReadOnly = true;
        opts.Language = "css";
        opts.ColorDecorators = false;
        return opts;
    }


    private readonly DebounceHelper _debouncer = new();

    private async Task<bool> ModelChanged()
    {
        return await _debouncer.DebounceAsync(async _ =>
        {
            await UpdateView();
            return true;
        }, 200);
    }

    static string _previousCss = string.Empty;

    private async Task UpdateView()
    {
        var htmlContent = await HtmlEditor.GetValue();

        var results = CssParser.GetCssClasses(htmlContent);
        var css = _framework.Process(results);

        if (_previousCss != css)
        {

            await CssEditor.SetValue(css);
            _previousCss = css;
        }

        await PreviewViewer.UpdateAsync(htmlContent, $"{css}");
    }

    public static string ExtractLayerContent(string css)
    {
        // If no @layer, return the whole string
        if (!css.Contains("@layer"))
            return css;

        // Find the @layer utilities block
        var layerStart = css.IndexOf("@layer utilities", StringComparison.Ordinal);
        if (layerStart == -1)
            return css;

        // Find the opening brace
        var openBraceIndex = css.IndexOf('{', layerStart);
        if (openBraceIndex == -1)
            return css;

        // Find the matching closing brace
        var braceCount = 1;
        var closeBraceIndex = openBraceIndex + 1;

        while (closeBraceIndex < css.Length && braceCount > 0)
        {
            switch (css[closeBraceIndex])
            {
                case '{':
                    braceCount++;
                    break;
                case '}':
                    braceCount--;
                    break;
            }

            closeBraceIndex++;
        }

        if (braceCount != 0)
            return css; // Malformed CSS

        // Extract content between braces
        var content = css.Substring(openBraceIndex + 1, closeBraceIndex - openBraceIndex - 2);

        // Remove common leading whitespace
        return RemoveCommonLeadingWhitespace(content);
    }

    private static string RemoveCommonLeadingWhitespace(string text)
    {
        var lines = text.Split(["\r\n", "\r", "\n"], StringSplitOptions.None);

        // Find minimum leading whitespace (ignoring empty lines)
        var minLeadingSpaces = int.MaxValue;
        foreach (var line in lines)
        {
            if (string.IsNullOrWhiteSpace(line))
                continue;

            var leadingSpaces = 0;
            foreach (var c in line)
            {
                if (c is ' ' or '\t')
                    leadingSpaces++;
                else
                    break;
            }

            minLeadingSpaces = Math.Min(minLeadingSpaces, leadingSpaces);
        }

        if (minLeadingSpaces is int.MaxValue or 0)
            return text.Trim('\r', '\n');

        // Remove common leading whitespace from all lines
        var result = new StringBuilder();
        foreach (var line in lines)
        {
            if (string.IsNullOrWhiteSpace(line))
                result.AppendLine();
            else
                result.AppendLine(line.Substring(Math.Min(minLeadingSpaces, line.Length)));
        }

        return result.ToString().Trim('\r', '\n');
    }

    private async Task EditorOnInit()
    {
        await Global.DefineTheme(Js, "my-custom-theme", new StandaloneThemeData
        {
            Base = "vs-dark",
            Inherit = true,
            Rules =
            [
                new TokenThemeRule { Background = "363636", Foreground = "E0E0E0" }
            ],
            Colors = new Dictionary<string, string>
            {
                ["editor.background"] = "#FFFFFF00",
                ["editorCursor.foreground"] = "#E0E0E0",
                ["editorLineNumber.foreground"] = "#7A7A7A66",
                ["editorSuggestWidget.background"] = "#354771F0",
                ["editorSuggestWidget.selectedBackground"] = "#354771",
                ["editorSuggestWidget.selectedForeground"] = "#e2e6e6",
                ["editorSuggestWidget.foreground"] = "#e2e6e6",
                ["editorHoverWidget.background"] = "#232934",
                ["editorHoverWidget.border"] = "#374151"
            },
        });

        await Global.SetTheme(Js, "my-custom-theme");


        await HtmlEditor.SetValue(@"
<!--
    Welcome to Monorail Play. Feel free to edit the HTML below and watch the
    preview and generated CSS change as you edit.
-->
<div class=""grid place-items-center h-screen w-full bg-gradient-to-bl from-slate-600 via-sky-500 to-sky-300"">
    <div class=""text-slate-800 text-sm md:text-base border border-slate-700/20 px-8 py-4 bg-gray-100 sm:rounded-lg md:rounded-xl lg:rounded-2xl shadow-xl"">
        <h2 class=""text-2xl md:text-4xl font-extrabold mb-4"">Welcome to Monorail<span class=""text-sky-500"">CSS</span></h2>

        <ul class=""list-disc list-inside  mb-8"">
            <li>Fully .NET utility-first CSS Framework.</li>
            <li>No javascript. No SASS. No bundlers. No NPM.</li>
            <li>Fast - can be executed at runtime in milliseconds.
            <li>Aims to be compatible with TailwindCSS utility syntax.</li>
        </ul>
        <p>Find out more at <a class=""text-sky-600"" href=""https://github.com/monorailcss/MonorailCss.Framework"">https://github.com/monorailcss/MonorailCss.Framework</a></p>
    </div>
</div>".Trim());
    }

}

