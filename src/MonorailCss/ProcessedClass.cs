using System.Collections.Immutable;
using MonorailCss.Ast;
using MonorailCss.Candidates;
using MonorailCss.Utilities;

namespace MonorailCss;

/// <summary>
/// Represents a CSS class that has been successfully processed through a utility.
/// </summary>
internal sealed record ProcessedClass(
    string ClassName,
    string UtilityName,
    ImmutableList<AstNode> AstNodes,
    Candidate Candidate,
    UtilityLayer Layer = UtilityLayer.Utility)
{
    /// <summary>
    /// Gets the original class name from the input.
    /// </summary>
    public string ClassName { get; init; } = ClassName;

    /// <summary>
    /// Gets the name of the utility that processed this class.
    /// </summary>
    public string UtilityName { get; init; } = UtilityName;

    /// <summary>
    /// Gets the AST nodes generated by the utility.
    /// </summary>
    public ImmutableList<AstNode> AstNodes { get; init; } = AstNodes;

    /// <summary>
    /// Gets the parsed candidate information.
    /// </summary>
    public Candidate Candidate { get; init; } = Candidate;

    /// <summary>
    /// Gets the CSS properties generated by this class.
    /// Extracted from Declaration nodes for sorting purposes.
    /// </summary>
    public ImmutableList<string> CssProperties { get; init; } = ExtractProperties(AstNodes);

    private static ImmutableList<string> ExtractProperties(ImmutableList<AstNode> nodes)
    {
        var properties = new List<string>();
        ExtractPropertiesRecursive(nodes, properties);
        return properties.ToImmutableList();
    }

    private static void ExtractPropertiesRecursive(IEnumerable<AstNode> nodes, List<string> properties)
    {
        foreach (var node in nodes)
        {
            switch (node)
            {
                case Declaration decl:
                    properties.Add(decl.Property);
                    break;
                case StyleRule styleRule:
                    ExtractPropertiesRecursive(styleRule.Nodes, properties);
                    break;
                case NestedRule nestedRule:
                    ExtractPropertiesRecursive(nestedRule.Nodes, properties);
                    break;
                case AtRule atRule:
                    ExtractPropertiesRecursive(atRule.Nodes, properties);
                    break;
                case Context context:
                    ExtractPropertiesRecursive(context.Nodes, properties);
                    break;
            }
        }
    }
}