using System.Collections.Immutable;
using MonorailCss.Ast;

namespace MonorailCss.Utilities.Resolvers;

/// <summary>
/// Represents the result of resolving a utility value, which may produce
/// multiple declarations, CSS custom properties, and additional AST nodes.
/// </summary>
internal record ResolvedUtility
{
    /// <summary>
    /// Gets the primary CSS declarations generated by this utility.
    /// </summary>
    public ImmutableList<Declaration> Declarations { get; init; } = ImmutableList<Declaration>.Empty;

    /// <summary>
    /// Gets cSS custom properties that need to be set (e.g., for gradient composition).
    /// </summary>
    public ImmutableList<Declaration>? CustomProperties { get; init; }

    /// <summary>
    /// Gets additional AST nodes (e.g., @supports rules, nested selectors).
    /// </summary>
    public ImmutableList<AstNode>? AdditionalNodes { get; init; }

    /// <summary>
    /// Creates a ResolvedUtility with a single declaration.
    /// </summary>
    public static ResolvedUtility Single(string property, string value, bool important = false)
    {
        return new ResolvedUtility
        {
            Declarations = ImmutableList.Create(new Declaration(property, value, important)),
        };
    }

    /// <summary>
    /// Creates a ResolvedUtility with multiple declarations.
    /// </summary>
    public static ResolvedUtility Multiple(params Declaration[] declarations)
    {
        return new ResolvedUtility
        {
            Declarations = ImmutableList.Create(declarations),
        };
    }

    /// <summary>
    /// Creates a ResolvedUtility with multiple declarations from a list.
    /// </summary>
    public static ResolvedUtility Multiple(ImmutableList<Declaration> declarations)
    {
        return new ResolvedUtility
        {
            Declarations = declarations,
        };
    }

    /// <summary>
    /// Gets creates an empty ResolvedUtility (no declarations).
    /// </summary>
    public static ResolvedUtility Empty => new();

    /// <summary>
    /// Converts this resolved utility to a list of AST nodes.
    /// </summary>
    public ImmutableList<AstNode> ToAstNodes()
    {
        var nodes = ImmutableList.CreateBuilder<AstNode>();

        if (CustomProperties != null)
        {
            nodes.AddRange(CustomProperties);
        }

        nodes.AddRange(Declarations);

        if (AdditionalNodes != null)
        {
            nodes.AddRange(AdditionalNodes);
        }

        return nodes.ToImmutable();
    }
}