@page "/{CategorySlug}/{PropertySlug}"
@using MonorailCss.Docs.Services
@using MonorailCss.Documentation
@inject UtilityContentService UtilityService
@inject CssFramework CssFramework
@layout MainLayout

<Breadcrumbs Items="@_breadcrumbs" />

@if (_propertyUtilities == null || _categoryName == null)
{
    <p>Not Found</p>
}
else
{
    var allExamples = _propertyUtilities.Utilities.SelectMany(u => u.Examples).ToList();

    <div  class="space-y-8">
        <h1 class="text-4xl font-bold mb-4 text-base-900 dark:text-primary-50">
            @_propertyUtilities.DisplayName
        </h1>


        <!-- Description Section -->
        @{
            var utility = _propertyUtilities.Utilities.First(u => !string.IsNullOrEmpty(u.Metadata.Description));
        }

        <p class="text-base-600 dark:text-base-400 text-lg lg:text-xl ">
            @utility.Metadata.Description
        </p>

        <!-- Examples Section -->
        @if (allExamples.Any())
        {
            <div class="border border-base-200 dark:border-base-800 rounded-lg overflow-hidden bg-white dark:bg-base-900">
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead>
                            <tr class="border-b border-base-200 dark:border-base-800">
                                <th class="px-6 py-3 text-left text-xs font-medium text-base-500 dark:text-base-400 uppercase tracking-wider bg-base-50 dark:bg-base-800">
                                    Class
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-base-500 dark:text-base-400 uppercase tracking-wider bg-base-50 dark:bg-base-800">
                                    CSS Output
                                </th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-base-200 dark:divide-base-800">
                            @foreach (var example in allExamples)
                            {
                                var generatedCss = GetGeneratedCss(example.ClassName);

                                <tr>
                                    <td class="px-2 py-1 lg:px-6 lg:py-2 whitespace-nowrap">
                                        <code class="text-xs font-mono text-tertiary-one-600 dark:text-tertiary-one-400 py-1 rounded">
                                            @example.ClassName
                                        </code>
                                    </td>
                                    <td class="px-2 py-2 lg:px-6 lg:py-2">
                                        @if (!string.IsNullOrEmpty(generatedCss))
                                        {
                                            <pre class="text-xs font-mono text-tertiary-two-700 dark:text-tertiary-two-300 py-1 overflow-x-auto"><code>@generatedCss</code></pre>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            <div class="border border-base-200 dark:border-base-800 rounded-lg p-6 bg-white dark:bg-base-900 text-center">
                <p class="text-base-500 dark:text-base-400">No examples available for this property.</p>
            </div>
        }

        <!-- Reference Section -->
        @{
            var cssProperties = GetCssPropertiesFromExamples(allExamples);
        }
        @if (cssProperties.Any())
        {
            <div class="space-y-4">
                <h2 class="text-2xl font-bold text-base-900 dark:text-primary-50">
                    Reference
                </h2>
                <div class="border border-base-200 dark:border-base-800 rounded-lg p-6 bg-white dark:bg-base-900">
                    <ul class="space-y-2">
                        @foreach (var property in cssProperties.OrderBy(p => p))
                        {
                            <li>
                                <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@property"
                                   class="text-tertiary-one-600 dark:text-tertiary-one-400 hover:underline font-mono text-sm pr-4"
                                   target="_blank"
                                   rel="noopener noreferrer">
                                    @property
                                </a>
                                <span class="text-xs text-base-600 dark:text-base-400 ">
                                    MDN â†—
                                </span>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public string CategorySlug { get; set; } = string.Empty;

    [Parameter]
    public string PropertySlug { get; set; } = string.Empty;

    private string? _categoryName;
    private PropertyUtilities? _propertyUtilities;
    private List<Breadcrumbs.BreadcrumbItem> _breadcrumbs = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadPropertyAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadPropertyAsync();
    }

    private async Task LoadPropertyAsync()
    {
        _categoryName = await UtilityService.GetCategoryNameFromSlugAsync(CategorySlug);
        _propertyUtilities = await UtilityService.GetUtilitiesForPropertyAsync(CategorySlug, PropertySlug);

        var propertyTitle = _propertyUtilities?.DisplayName ?? PropertySlug;

        _breadcrumbs =
        [
            new Breadcrumbs.BreadcrumbItem { Title = "Home", Url = "/" },
            new Breadcrumbs.BreadcrumbItem { Title = "Utilities", Url= string.Empty },
            new Breadcrumbs.BreadcrumbItem { Title = _categoryName ?? CategorySlug, Url = string.Empty },
            new Breadcrumbs.BreadcrumbItem { Title = propertyTitle, IsCurrent = true },
        ];
    }

    private string GetGeneratedCss(string className)
    {
        try
        {
            return CssFramework.CompileUtilityClass(className) ?? string.Empty;
        }
        catch (Exception)
        {
            return string.Empty;
        }
    }

    private HashSet<string> GetCssPropertiesFromExamples(List<UtilityExample> examples)
    {
        var properties = new HashSet<string>();

        foreach (var example in examples)
        {
            var css = GetGeneratedCss(example.ClassName);
            if (string.IsNullOrEmpty(css))
                continue;

            // Parse CSS to extract property names
            // CSS format: .class-name { property: value; property2: value2; }



            var parts = css.Split(';', StringSplitOptions.RemoveEmptyEntries);

            foreach (var part in parts)
            {
                var colonIndex = part.IndexOf(':');
                if (colonIndex > 0)
                {
                    var propertyName = part.Substring(0, colonIndex).Trim();
                    if (!string.IsNullOrEmpty(propertyName) && !propertyName.StartsWith("--"))
                    {
                        properties.Add(propertyName);
                    }
                }
            }
        }

        return properties;
    }
}
